"" Source vimrc upon saving vimrc {
    augroup source_vimrc
        autocmd!
        if has("autocmd")
            autocmd bufwritepost .vimrc nested source $MYVIMRC
        endif
    augroup END
"" {


"" Remove menus in gvim {
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
"" }


"" Line highlighting {
    augroup CursorLine
        au!
        au Vimenter,WinEnter,BufWinEnter * setlocal cursorline
        au WinLeave * setlocal nocursorline
    augroup END
    "set cursorline
    hi CursorLine ctermbg=240
            " Set background color of current line

    set colorcolumn=80      " Show 80th column
"" }


"" Color scheme {
    set t_Co=256
    set background=dark
    let g:solarized_termcolors=256
    colorscheme solarized
"" }


"" Folding {
    set foldenable          " Use zo and zc to open and close folds
    set foldmethod=manual   " Fold manually
    au BufWinLeave *.* mkview
    au BufWinEnter *.* silent loadview
            "Save folds when closing file and reload folds when reopening file
"" }


"" Indentation {
    set expandtab           " Convert tabs to spaces
    set smarttab            " Go as far as the non empty character
    set tabstop=4           " Number of spaces per tab character
    set softtabstop=-1      " Number of spaces using <Tab> or <BS>
    set shiftwidth=0        " Number of spaces used for auto indentation
    set shiftround          " Round < and > indents to a multiple of shiftwidth
    set autoindent
"" }

"" Spell check {
    set spell spelllang=en_us
    set nospell
    let tex_comment_nospell=1   " Don't spell check comments
"" }

"" Search {
    set hlsearch            " Highlight search results
    set incsearch           " Search while typing
    set ignorecase          " Search is NOT case sensitive, force sensitive with backslash-C
    set smartcase           " Search case sensitive using capital letters
"" }


"" Splits {
    set splitbelow          " New splits below, not above
    set splitright          " New splits on the right, not left
"" }


"" Line numbers {
    set relativenumber      " Line numbers are relative to current line
    set number              " Display actual number for current line
"" }


"" Functions {
    function! WriteCompileTex()
    write
    let fts = ['tex']
    if index(fts, &filetype) != -1
        :! latexmk -r ~/.config/latexmk/latexmkrc -pdf %
    endif
    endfunction
"" }


"" Vim autogenerated files {
    set nobackup            " Disable backups
    " Uncomment the below if odd files appear a lot
    "set nowritebackup       " Don't write pre-save backup files

    set noswapfile          " Disable swap files

    " Enable persistent undo history
    set undofile
    set undodir=$HOME/.vim/undo
    set undolevels=1000
    set undoreload=10000
"" }


"" Miscellaneous {
    set encoding=utf-8

    set scrolloff=5         " Always show x lines above/below current line

    set wildmenu            " Show a list of autocomplete options from the command line

    set noshowcmd           " Don't show how many characters/lines are visually
                            " selected. Improves performance

    set nolazyredraw        " Redraw as often as needed, decreases lag
    set autoread            " Automatically re-read file when edited outside of vim
    set backspace=indent,eol,start
            " allow backspacing over everything in insert mode

    " Word wrap behaviuor
    " To stop automatic wrapping, set textwidth to zero
    set textwidth=0
    set wrapmargin=0
    set wrap
    set linebreak
    set nolist

    filetype plugin indent on
            " Enable filetype and plugin indent
    syntax enable           " Use syntax highlighting
    hi Normal ctermbg=NONE  " Set transparent background, has to be after syntax enable
    set hidden              " Allow for hiding buffers without saving them


    " Make J smarter with comments
    if v:version > 703 || v:version == 703 && has('patch541')
        set formatoptions+=j
    endif

    set noshowmode          " Hide the mode below the statusline

    set laststatus=2        " Always display the statusline in all windows

    " Make help always open vertically
    augroup open_help_80_cols
        autocmd!
        if !exists("*OpenHelp80Cols")
            function OpenHelp80Cols()
                wincmd L
                exec 'vertical resize 81'
            endfunction
            autocmd FileType help :call OpenHelp80Cols()
        endif
    augroup END

    " Enable highlight of all plugins
    augroup python_highlighting
        autocmd!
        let python_highlight_all = 1
    augroup END

    " Fix meta-keys which generate <Esc>a .. <Esc>z
    let c='a'
    while c <= 'z'
        exec "set <M-".toupper(c).">=\e".c
        exec "imap \e".c." <M-".toupper(c).">"
        let c = nr2char(1+char2nr(c))
    endw
"" }



